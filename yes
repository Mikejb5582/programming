def q1(floatstr):

  6     Given the floatstr, which is a comma separated string of
  7     floats, return a list with each of the floats in the 
  8     argument as elements in the list.
  9     '''
 10 
 11     plswork =  [float(x) for x in floatstr.split(',')]
 12         
 13     return plswork
 
 or
 
        fl_list = []
        float_list = floatstr.split(',')
        fl = 0.0
        for item in float_list:
            fl = float(item)
            fl_list.append(fl)
        
        return fl_list
        
  or 
  
         return list(map(float, floatstr.split('.')))




def q2(*args):

Given the variable length argument list, return the average
 21     of all the arguments as a float
 22     '''
 23     avg = float(sum(args))/len(args)
 24     return avg
 
 or 
 
 
        s = 0 
        for i in args:
            s =+ i
        return s/len(args)




 def q3(lst,n):

Given a list (lst) and a number of items (n), return a new 
 30     list containing the last n entries in lst.
 31     '''
 32     return lst[-n:]  
 
 
 
 
 def q4(strng):
 
 38     Given an input string, return a list containing the ordinal numbers of 
 39     each character in the string in the order found in the input string.
 40     '''
 41     orple = []
 42     for i in strng:
 43         orple.append(ord(i))
 44     return orple
 
 
 or     
        
        
        return list(map(ord,strng))
        return [ord(i) for i in string]
 
 
 
 
 def q5(strng):

 50     Given an input string, return a tuple with each element in the tuple
 51     containing a single word from the input string in order.
 52     return tuple(strng.split())






def q6(catalog, order):

 58     Given a dictionary (catalog) whose keys are product names and values are product
 59     prices per unit and a list of tuples (order) of product names and quantities,
 60     compute and return the total value of the order.
 61 
 62     Example catalog:
 63     {
 64         'AMD Ryzen 5 5600X': 289.99,
 65         'Intel Core i9-9900K': 363.50,
 66         'AMD Ryzen 9 5900X': 569.99
 67     }
 68 
 69     Example order:
 70     [
 71         ('AMD Ryzen 5 5600X', 5), 
 72         ('Intel Core i9-9900K', 3)
 73     ]
 74 
 75     Example result:
 76     2540.45 
 77 
 78     How the above result was computed:
 79     (289.99 * 5) + (363.50 * 3)
 80     '''
 81     total = 0
 82     for product,quantity in order:
 83         total += catalog[product] * quantity
 84     return total        
 
 
 or      

        return sum([catalog[product]*quantity for product,quantity in order])
 
 
 def q7(filename):

 87     Given a filename, open the file and return the length of the first line 
 88     in the file excluding the line trminator.
 89     '''
 90     with open(filename) as fp:
 91         line1 = fp.read()
 92         line2 = line1.split('\n',1)[0]
 93         return len(line2)
 
 
 or     
        
         with open(filename, 'r') as fp:
             return (len(fp.readline()) - 1)
 
 
 
 
 
 
def q8(filename,lst):

103     Given a filename and a list, write each entry from the list to the file
104     on separate lines until a case-insensitive entry of "stop" is found in 
105     the list. If "stop" is not found in the list, write the entire list to 
106     the file on separate lines.
107     '''
108     with open(filename, 'w') as fp:
109         for item in lst:
                stoplower = item.lower()
110             if stoplower == 'stop':  
111                 break
112             else:
113                 fp.write(item + '\n')
114     pass        
115     

or 

        with open(filename 'w') as fp:
             for i in lst:
                 if i.lower() == 'stop':
                     break
                 fp.write('{}\n'.format(i))




def q9(miltime):

120     Given the military time in the argument miltime, return a string 
121     containing the greeting of the day.
122     0300-1159 "Good Morning"
123     1200-1559 "Good Afternoon"
124     1600-2059 "Good Evening"
125     2100-0259 "Good Night"
126     '''
127     if (miltime >= 300) and (miltime <= 1159):
128         return 'Good Morning'
129     elif (miltime >= 1200) and (miltime <= 1559):
130         return 'Good Afternoon'
131     elif (miltime >= 1600) and (miltime <= 2059):
132         return 'Good Evening'
133     elif (miltime >= 2100) and (miltime <= 259):
134         return 'Good Night'
135     pass




 
 def q10(numlist):

121     Given the argument numlist as a list of numbers, return True if all 
122     numbers in the list are NOT negative. If any numbers in the list are
123     negative, return False.
124     '''
125     if all(x > -1 for x in numlist):                                                      
126         return True
127     else:
128         return False


or 

        for i in numlist:
            if i < 0:
                return False
                
        return True

or     

        return all(map(lambda x: x >=0, numlist)





