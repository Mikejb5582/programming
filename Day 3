SETS
  *** unorganized, cannot pull items out using index, no duplicate items
  >>>myset = {1, 2, 3, 3, 3, 5, 6}
  >>>myset
  {1, 2, 3, 5, 6}
  >>>myset.add(100)
  {1, 2, 3, 100, 5, 6}
  >>> 3 in myset
  True
  myset.union(myotherset) *** does not overwrite, creates new set
  myset.difference(otherset) *** in left, not right /// myset.intersection(otherset)
  
  
DICTIONARIES
  >>>mydict = {'Pvt':;'E-1', 'PFC'='E-2', 'LCpl':'E-3', 'Cpl':'E-4'}
  >>>mydict['PFC']
  'E-2'
  >>> mydict['SPC'] = 'E-4' *** Cpl/SPC share 'E-4' key
  >>>mydict['Pvt'] = 'E-0' *** overwrites 'E-1' key
  >>> del mydict['SPC']
  
  >>>mystr = 'hello world'
  >>>mydict = {}
  >>>for i in mystr:
  ...   if i in mydict:
  ...           mydict[i] += 1
  ...   else:
  ...           mydict[i] = 1
  
  >>>mydict
  {'h': 1, 'e': 1, 'l': 3, 'o': 2, ' ': 1, 'w': 1, 'r': 1, 'd': 1,}


FUNCTIONS
1 def fun(a, b):    ***defines fun, a and b arguemnts of function
2     print(a + b)
3
4 fun(4, 7)

11


1 def fun(a, b):
2     return a + b
3
4 fun(4, 7)


1 def fun(*args):   *** variable amount of arguemnts, stored as tuple
2     print(args)
3     
4     return sum(args)
5
6 print(fun(4, 7, ))

20


1 def fun(**kwargs):   ***key word args
2     print(kwargs)
3
4     print("I drive a {} {} {}.".format(kwargs['year'], kwargs['make'], kwargs['model']))
5
6     fun(year='1982', make='DMC', model='DeLorean')

1 #def fun(x):
2 #    return x + 10
3
4 #print(fun(1))
5              ^ v   **** ^ v same thing
6 y = lambda x: x + 10
7
8 print(y(1))


1 def incrementaor(n):
2     return lambda x: x + n
3
4 y = incrementor(42)
5
6 print('First time: ' + str(y(5)))
7 print('Second time: ' + str(y(5)))
8 print('Third time: ' + str(y(5)))

First time: 47
Second time: 47
Third time: 52


SORTED *** non destructive
SORT *** destructive

sorted(mylist) ** sorts list alphabetically

list(reversed(mylist)) *** reversed alphabetically
sorted(mylist, key=len, reverse=True) ****reversed by length

min/max(mylist, key=len) *** returns shortest/longest strings

mylist ['this', 'my', 'list', 'is']
list(enumerate(mylist))
[(0, 'this' , (1,'my'), (2, 'list'), (3, 'is')]



c = 0
for i in myList:
    print(i, mynewlist[c])
    c+= 1
    
this one
mymore
list time
is wegonnacelebrate


for c,i in enuumerate(mylist):                ************* Creates a list of tuples
    print('item:', i, mynewlist[c], 'value of c:', c)
    list0 = ['one', 'more', 'time']
    list(enumerate(list0))
    [(0, 'one'), (1, 'more'), (2, 'time')]
    
    for c,i in enumerate(list0):
        list1[c] = 1
        **** overwrites list1 with list0 contents, ID remains the same
    
item: this one value of c: 0
item: my more value of c: 1
item: list time value of c: 2
item: is wegonnacelebrate value of c: 3

enumerate(mylist)
list(enumerate(mylist))
[(0, 'this'), (1, 'my'), (2, 'list'), (3, 'is')]



mylist ['1', '3', '5', '7', '9']
>>>map(int, mylist)
>>>list(map(int, mylist))
[1, 3, 5, 7, 9]
>>> list(map(float, mylist))
[1.0, 3.0, 5.0, 7.0, 9.0]




>>>myints = []
>>>for i in mylist:
    myints.append(int(i))
    
>>>myints
[1, 3, 5, 7, 9]
>>>
mylist
['1', '3', '5', '7', '9']



for i in myStr:
    if i in myDict:
            print("{} has value {}".format(i, myDict[i]))
    else:
            print(f"{i} is not in myDict")
            
            
I has value 1
V has value 5
X has value 10
C has value 100
L is not in myDict
